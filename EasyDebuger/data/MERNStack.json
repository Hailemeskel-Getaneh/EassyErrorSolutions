[
    {
      "id": 1,
      "title": "CORS Error Between React Frontend and Express Backend",
      "message": "Cross-Origin Resource Sharing (CORS) error when fetching data from Express API.",
      "causes": [
        "Backend server not configured to allow requests from React frontend origins.",
        "Missing CORS headers in Express responses.",
        "React app running on a different port (e.g., localhost:3000) than Express (e.g., localhost:5000)."
      ],
      "solutions": [
        "Install and configure `cors` middleware in Express: `npm install cors` and `app.use(cors())`.",
        "Specify allowed origins: `app.use(cors({ origin: 'http://localhost:3000' }))`.",
        "For development, set up a proxy in `package.json` of React: `\"proxy\": \"http://localhost:5000\"`."
      ]
    },
    {
      "id": 2,
      "title": "MongoDB Connection Timeout",
      "message": "Failed to connect to MongoDB: 'connect ETIMEDOUT' or 'connection refused'.",
      "causes": [
        "Incorrect MongoDB URI in environment variables.",
        "MongoDB server not running or unreachable (e.g., wrong host/port or Atlas whitelist).",
        "Firewall blocking MongoDB port (default: 27017)."
      ],
      "solutions": [
        "Verify MongoDB URI in `.env`: `MONGODB_URI=mongodb://localhost:27017/dbname` or Atlas URI.",
        "Ensure MongoDB is running: `mongod` (local) or whitelist IP in Atlas.",
        "Check firewall settings and allow port 27017."
      ]
    },
    {
      "id": 3,
      "title": "React App Fails to Fetch Data from Express API in Production",
      "message": "API requests fail with 404 or CORS errors in production but work in development.",
      "causes": [
        "Frontend and backend hosted on different domains without proper CORS setup.",
        "API base URL hardcoded as `localhost` in React.",
        "Environment variables for API URL not set in production."
      ],
      "solutions": [
        "Set API base URL dynamically: `const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000'`.",
        "Configure CORS for production origin in Express: `app.use(cors({ origin: 'https://yourdomain.com' }))`.",
        "Use environment variables in production: `.env.production` with `REACT_APP_API_URL`."
      ]
    },
    {
      "id": 4,
      "title": "Node.js 'Cannot Find Module' Error in Express",
      "message": "Cannot find module 'some-package' when running Express server.",
      "causes": [
        "Package not installed in `node_modules`.",
        "Running `node server.js` from the wrong directory.",
        "Typo in module import path or name."
      ],
      "solutions": [
        "Install the missing package: `npm install some-package`.",
        "Ensure you're in the correct directory: `cd backend && node server.js`.",
        "Verify import path: `require('./module')` or `import module from './module'`.",
        "Clear npm cache if needed: `npm cache clean --force`."
      ]
    },
    {
      "id": 5,
      "title": "MongoDB Query Returns Empty Array",
      "message": "No data returned from MongoDB query despite data existing in the database.",
      "causes": [
        "Incorrect query syntax or field names.",
        "Connecting to the wrong database or collection.",
        "Data type mismatch in query (e.g., string vs. ObjectId)."
      ],
      "solutions": [
        "Double-check query syntax: `Model.find({ field: value })`.",
        "Verify database and collection names in MongoDB URI and code.",
        "Convert data types if needed: `mongoose.Types.ObjectId(id)` for ObjectId fields."
      ]
    },
    {
      "id": 6,
      "title": "React State Not Updating After API Call",
      "message": "State updates don’t reflect in UI after fetching data from Express API.",
      "causes": [
        "Not using `setState` or `useState` hook correctly.",
        "Asynchronous API call not awaited properly.",
        "Mutating state directly instead of creating a new state."
      ],
      "solutions": [
        "Use `setState` or `useState` correctly: `setData(response.data)`.",
        "Await API calls: `const response = await axios.get('/api/data')`.",
        "Ensure immutability: `setData([...response.data])` for arrays."
      ]
    },
    {
      "id": 7,
      "title": "Environment Variables Undefined in Node.js/Express",
      "message": "Environment variables like `process.env.MONGODB_URI` are undefined.",
      "causes": [
        "Missing `.env` file or `dotenv` package.",
        "Environment variables not loaded before usage.",
        "CI/CD or production environment not configured with variables."
      ],
      "solutions": [
        "Install and configure `dotenv`: `npm install dotenv` and `require('dotenv').config()` at the top of `server.js`.",
        "Create `.env` file with variables: `MONGODB_URI=mongodb://localhost:27017/dbname`.",
        "Set variables in production (e.g., Heroku: `heroku config:set MONGODB_URI=...`)."
      ]
    },
    {
      "id": 8,
      "title": "Express Middleware Not Executing",
      "message": "Custom middleware in Express doesn’t run or apply as expected.",
      "causes": [
        "Middleware not properly defined or missing `next()` call.",
        "Middleware registered after routes in Express.",
        "Incorrect middleware mounting path."
      ],
      "solutions": [
        "Ensure middleware calls `next()`: `(req, res, next) => { ...; next(); }`.",
        "Register middleware before routes: `app.use(middleware); app.use('/api', routes);`.",
        "Verify middleware path: `app.use('/specific-path', middleware)`."
      ]
    },
    {
      "id": 9,
      "title": "React App White Screen in Production",
      "message": "React app shows a white screen after deployment with no errors.",
      "causes": [
        "Incorrect `homepage` field in `package.json`.",
        "Routing issues with React Router (e.g., 404 on refresh).",
        "Missing `build` folder or incorrect static file serving in Express."
      ],
      "solutions": [
        "Set `homepage` in `package.json`: `\"homepage\": \"https://yourdomain.com\"`.",
        "Serve React build correctly in Express: `app.use(express.static(path.join(__dirname, 'frontend/build'))); app.get('*', (req, res) => res.sendFile(path.join(__dirname, 'frontend/build/index.html')));`.",
        "Ensure `build` folder exists: `cd frontend && npm run build`."
      ]
    },
    {
      "id": 10,
      "title": "MongoDB Duplicate Key Error",
      "message": "MongoDB throws `E11000 duplicate key error collection`.",
      "causes": [
        "Inserting a document with a duplicate value in a unique index field (e.g., email).",
        "Not handling duplicate inserts in application logic.",
        "Schema changes causing unexpected unique constraints."
      ],
      "solutions": [
        "Check for existing documents before saving: `Model.findOne({ email })`.",
        "Handle errors in code: `try { await newDoc.save() } catch (err) { if (err.code === 11000) handleDuplicate() }`.",
        "Drop or modify unique index if not needed: `db.collection.dropIndex('field_unique')`."
      ]
    },
    {
      "id": 11,
      "title": "Node.js Memory Leak in Express Server",
      "message": "Express server slows down or crashes due to memory usage spikes.",
      "causes": [
        "Unclosed database connections or streams.",
        "Global variables storing large data indefinitely.",
        "Infinite loops or recursive calls in API routes."
      ],
      "solutions": [
        "Ensure connections close properly: `mongoose.connection.close()` in cleanup.",
        "Use memory profiling tools like `node --inspect` and Chrome DevTools.",
        "Check for infinite loops and optimize recursive functions."
      ]
    },
    {
      "id": 12,
      "title": "React App Fails to Render Large Data from MongoDB",
      "message": "React UI lags or crashes when rendering large datasets fetched from MongoDB.",
      "causes": [
        "Fetching and rendering entire dataset at once.",
        "No pagination or lazy loading implemented.",
        "Inefficient rendering of large lists in React."
      ],
      "solutions": [
        "Implement pagination in Express: `Model.find().skip(page * limit).limit(limit)`.",
        "Use React virtualized lists: `react-window` or `react-virtualized`.",
        "Fetch data incrementally with infinite scroll or `useEffect`."
      ]
    },
    {
      "id": 13,
      "title": "Express API Rate Limit Exceeded Error",
      "message": "Express API returns '429 Too Many Requests' error.",
      "causes": [
        "No rate limiting implemented in Express.",
        "Rapid API calls from React frontend (e.g., in a loop).",
        "Third-party API used by Express enforcing rate limits."
      ],
      "solutions": [
        "Add rate limiting in Express: `npm install express-rate-limit` and `app.use(rateLimit({ windowMs: 15 * 60 * 1000, max: 100 }))`.",
        "Debounce or throttle API calls in React: `lodash.debounce` or `setTimeout`.",
        "Handle third-party API limits with retries or caching."
      ]
    },
    {
      "id": 14,
      "title": "MongoDB Schema Validation Fails Unexpectedly",
      "message": "MongoDB validation error: 'Path `field` is required'.",
      "causes": [
        "Document missing required fields defined in Mongoose schema.",
        "Frontend sending incomplete data to Express.",
        "Schema changes not reflected in existing database documents."
      ],
      "solutions": [
        "Validate data before saving: `const doc = new Model(data); await doc.validate()`.",
        "Add default values in schema: `{ field: { type: String, default: '' } }`.",
        "Update existing documents: `Model.updateMany({}, { $set: { field: 'default' } })`."
      ]
    },
    {
      "id": 15,
      "title": "React App Authentication Fails After Refresh",
      "message": "User logs out or loses auth state when refreshing React app.",
      "causes": [
        "Auth state stored only in React state (not persisted).",
        "JWT token not stored or validated correctly.",
        "No refresh token mechanism implemented."
      ],
      "solutions": [
        "Store JWT in `localStorage` or `sessionStorage`: `localStorage.setItem('token', token)`.",
        "Validate token on app load: `useEffect(() => { checkToken() }, [])`.",
        "Implement refresh tokens in Express: Issue new tokens via `/refresh-token` endpoint."
      ]
    },
    {
      "id": 16,
      "title": "Express Server Crashes on Unhandled Promise Rejection",
      "message": "Express server crashes with 'UnhandledPromiseRejectionWarning'.",
      "causes": [
        "Async route handlers not catching errors.",
        "No global error handler for rejected promises.",
        "MongoDB queries failing without error handling."
      ],
      "solutions": [
        "Use `try/catch` in async handlers: `async (req, res) => { try { ... } catch (err) { res.status(500).send(err) } }`.",
        "Add global handler: `process.on('unhandledRejection', (err) => console.error(err))`.",
        "Wrap routes in error middleware: `app.use((err, req, res, next) => res.status(500).send('Server Error'))`."
      ]
    },
    {
      "id": 17,
      "title": "React App Memory Usage Spikes on API Polling",
      "message": "React app slows down due to frequent API polling.",
      "causes": [
        "Uncontrolled `setInterval` in `useEffect` without cleanup.",
        "No debouncing or caching of API requests.",
        "Large API responses bloating React state."
      ],
      "solutions": [
        "Add cleanup in `useEffect`: `const interval = setInterval(fetchData, 5000); return () => clearInterval(interval)`.",
        "Cache responses with libraries like `react-query` or `swr`.",
        "Optimize state updates: Avoid storing unnecessary data in React state."
      ]
    },
    {
      "id": 18,
      "title": "MongoDB Indexes Not Applied Correctly",
      "message": "Slow queries despite indexes defined in MongoDB schema.",
      "causes": [
        "Indexes not created in MongoDB after schema definition.",
        "Compound indexes not matching query patterns.",
        "MongoDB version or Atlas tier not supporting certain indexes."
      ],
      "solutions": [
        "Ensure indexes are created: `Model.createIndexes()` or `db.collection.createIndex()`.",
        "Verify query matches index: Use `explain()` to analyze query performance.",
        "Check MongoDB server logs for indexing errors."
      ]
    },
    {
      "id": 19,
      "title": "Express Server Not Handling File Uploads",
      "message": "File uploads fail with '413 Payload Too Large' or no data received.",
      "causes": [
        "No middleware for handling multipart forms (e.g., `multer`).",
        "Body-parser size limit too low for file uploads.",
        "Frontend sending incorrect `Content-Type` for uploads."
      ],
      "solutions": [
        "Use `multer` for file uploads: `npm install multer` and `app.use(multer().single('file'))`.",
        "Increase body-parser limit: `app.use(express.json({ limit: '10mb' }))`.",
        "Set correct headers in React: `axios.post('/upload', formData, { headers: { 'Content-Type': 'multipart/form-data' } })`."
      ]
    },
    {
      "id": 20,
      "title": "React Router Not Working in Production Deployment",
      "message": "React Router returns 404 on page refresh in production.",
      "causes": [
        "Server not configured to serve React app for all routes.",
        "Express backend not redirecting SPA routes to `index.html`.",
        "Hosting provider (e.g., Netlify) not set up for SPA routing."
      ],
      "solutions": [
        "Serve React app for all routes in Express: `app.get('*', (req, res) => res.sendFile('frontend/build/index.html'))`.",
        "Add `_redirects` file for Netlify: `/* /index.html 200`.",
        "Set `basename` in React Router if hosted in subdirectory: `<BrowserRouter basename='/app'>`."
      ]
    },
    {
      "id": 21,
      "title": "MongoDB Aggregation Pipeline Returns Unexpected Results",
      "message": "Aggregation queries return incorrect or empty results.",
      "causes": [
        "Incorrect pipeline stages or syntax (e.g., `$match`, `$group`).",
        "Field names mismatched in pipeline stages.",
        "Data type mismatches in aggregation operators."
      ],
      "solutions": [
        "Validate pipeline stages: `Model.aggregate([{ $match: { field: value } }])`.",
        "Log intermediate results: `console.log(await Model.aggregate(...))`.",
        "Ensure field types match operators (e.g., `$gt` for numbers)."
      ]
    },
    {
      "id": 22,
      "title": "Express API Requests Timing Out",
      "message": "API requests hang or timeout when calling Express endpoints.",
      "causes": [
        "Long-running database queries in Express routes.",
        "No timeout set for Express server or HTTP requests.",
        "Network issues between React frontend and Express backend."
      ],
      "solutions": [
        "Optimize database queries: Add indexes or limit returned data.",
        "Set timeout in Express: `app.set('timeout', 30000)` and handle with `req.on('timeout', ...`).",
        "Set timeout in React: `axios.get('/api', { timeout: 5000 })`."
      ]
    },
    {
      "id": 23,
      "title": "React App Not Displaying Updated Data After MongoDB Update",
      "message": "Frontend UI doesn’t reflect backend updates after MongoDB operations.",
      "causes": [
        "Frontend not refetching data after update.",
        "Caching or stale state in React.",
        "Express API not returning updated data correctly."
      ],
      "solutions": [
        "Refetch data after update: `useEffect(() => { fetchData() }, [updateTrigger])`.",
        "Avoid caching issues: Use `react-query` or `swr` for fresh data.",
        "Return updated document in Express: `Model.findByIdAndUpdate(id, data, { new: true })`."
      ]
    },
    {
      "id": 24,
      "title": "Node.js Express Server Crashes on High Traffic",
      "message": "Express server crashes or slows down under heavy load.",
      "causes": [
        "No clustering or load balancing for Node.js.",
        "Synchronous operations blocking the event loop.",
        "Insufficient server resources (e.g., memory, CPU)."
      ],
      "solutions": [
        "Use Node.js clustering: `const cluster = require('cluster')` to spawn workers.",
        "Offload heavy tasks to worker threads: `worker_threads`.",
        "Deploy with PM2 for process management: `pm2 start server.js --watch`."
      ]
    },
    {
      "id": 25,
      "title": "MongoDB Replica Set Connection Issues",
      "message": "Cannot connect to MongoDB replica set from Express.",
      "causes": [
        "Incorrect replica set URI or missing `replicaSet` parameter.",
        "Primary node down or network issues between nodes.",
        "MongoDB Atlas cluster not properly configured."
      ],
      "solutions": [
        "Add `replicaSet` in URI: `mongodb://host1,host2/dbname?replicaSet=rs0`.",
        "Verify all nodes are running: Connect via MongoDB shell.",
        "Check Atlas cluster status and ensure IPs are whitelisted."
      ]
    },
    {
      "id": 26,
      "title": "React App Fails to Build in CI Pipeline",
      "message": "React app build fails in pipelines like GitHub Actions or Jenkins.",
      "causes": [
        "Missing Node.js version specification in CI environment.",
        "Outdated npm/Yarn dependencies causing conflicts.",
        "Environment variables not set in CI for React build."
      ],
      "solutions": [
        "Specify Node.js version: `.nvmrc` or `setup-node` action in CI.",
        "Use lockfiles: `npm ci` or `yarn install --frozen-lockfile` in CI.",
        "Set env vars in CI: `.env` or CI secrets (e.g., `REACT_APP_API_URL`)."
      ]
    },
    {
      "id": 27,
      "title": "Express API Not Receiving POST Body Data",
      "message": "POST request body is empty or undefined in Express.",
      "causes": [
        "Missing body-parser middleware in Express.",
        "Incorrect `Content-Type` header in React request.",
        "Sending data in wrong format (e.g., JSON vs URL-encoded)."
      ],
      "solutions": [
        "Add body-parser middleware: `app.use(express.json()); app.use(express.urlencoded({ extended: true }))`.",
        "Set correct headers in React: `axios.post('/api', data, { headers: { 'Content-Type': 'application/json' } })`.",
        "Log incoming requests in Express: `console.log(req.body)`."
      ]
    },
    {
      "id": 28,
      "title": "MongoDB Transactions Not Working with Mongoose",
      "message": "Transaction fails or doesn’t rollback on error.",
      "causes": [
        "MongoDB not running as a replica set (required for transactions).",
        "Session not properly managed in Mongoose.",
        "Transaction timeout or uncaught errors."
      ],
      "solutions": [
        "Set up MongoDB as a replica set: `mongod --replSet rs0` and initialize with `rs.initiate()`.",
        "Use Mongoose sessions: `const session = await mongoose.startSession(); session.startTransaction()`.",
        "Handle errors and cleanup: `try { ... } catch (err) { await session.abortTransaction() } finally { session.endSession() }`."
      ]
    },
    {
      "id": 29,
      "title": "React App Not Handling JWT Expiration Gracefully",
      "message": "App crashes or logs out unexpectedly when JWT expires.",
      "causes": [
        "No mechanism to refresh JWT tokens.",
        "API requests failing with 401 Unauthorized without handling.",
        "Frontend blindly trusting expired tokens."
      ],
      "solutions": [
        "Implement refresh token endpoint in Express: `/refresh-token` to issue new tokens.",
        "Handle 401 errors in React: `axios.interceptors.response.use(res => res, err => { if (err.response.status === 401) refreshToken() })`.",
        "Validate token expiry before requests: Decode token and check `exp` field."
      ]
    },
    {
      "id": 30,
      "title": "Express Server Fails to Serve Static Files in Production",
      "message": "Static files (e.g., React build) not served correctly by Express.",
      "causes": [
        "Incorrect path to static files in Express setup.",
        "Missing `express.static` middleware.",
        "Deployment environment not serving `build` folder."
      ],
      "solutions": [
        "Serve static files: `app.use(express.static(path.join(__dirname, 'frontend/build'))).",
        "Verify build folder exists: `cd frontend && npm run build` before deployment.",
        "Set correct path in production: Adjust `__dirname` if needed for deployment structure."
      ]
    },
    {
      "id": 31,
      "title": "React App Not Rendering Updated MongoDB Data in Real-Time",
      "message": "Frontend doesn’t reflect MongoDB updates without manual refresh.",
      "causes": [
        "No real-time mechanism (e.g., WebSockets) between Express and React.",
        "Frontend not polling or subscribing to updates.",
        "Express API not notifying clients of changes."
      ],
      "solutions": [
        "Implement WebSockets with `socket.io`: `npm install socket.io` in Express and `socket.io-client` in React.",
        "Poll API periodically in React: `useEffect(() => { const interval = setInterval(fetchData, 5000); return () => clearInterval(interval) }, [])`.",
        "Use MongoDB change streams: `Model.watch().on('change', data => io.emit('update', data))`."
      ]
    },
    {
      "id": 32,
      "title": "MongoDB Write Conflicts in High-Concurrency Apps",
      "message": "Write conflicts or data inconsistencies during concurrent updates.",
      "causes": [
        "No locking mechanism for concurrent writes.",
        "Overlapping transactions updating the same document.",
        "Optimistic concurrency control not implemented."
      ],
      "solutions": [
        "Use optimistic concurrency: Add `version` field and check before updates: `Model.findOneAndUpdate({ _id: id, version: currentVersion }, { $inc: { version: 1 } })`.",
        "Implement retry logic for failed writes: `try { await updateDoc() } catch (err) { retry() }`.",
        "Use MongoDB transactions for atomic updates if replica set enabled."
      ]
    },
    {
      "id": 33,
      "title": "Express Server Not Scaling with Multiple Users",
      "message": "Express server becomes slow or unresponsive with multiple users.",
      "causes": [
        "Single-threaded Node.js overwhelmed by requests.",
        "No caching for frequent API calls.",
        "Database queries not optimized for scale."
      ],
      "solutions": [
        "Use Node.js clustering or PM2: `pm2 start server.js -i max`.",
        "Add caching with Redis: `npm install redis` and cache API responses.",
        "Optimize MongoDB queries with indexes and aggregation pipelines."
      ]
    },
    {
      "id": 34,
      "title": "React App Fails to Display Errors from Express API",
      "message": "API errors are not shown in React UI, just logged in console.",
      "causes": [
        "No error handling in React after API calls.",
        "Express API not sending proper error responses.",
        "Frontend ignoring error states from API responses."
      ],
      "solutions": [
        "Handle errors in React: `axios.get('/api').catch(err => setError(err.response.data.message))`.",
        "Send structured errors from Express: `res.status(400).json({ error: 'Invalid input' })`.",
        "Display errors in UI: `<div>{error && <p>{error}</p>}</div>`."
      ]
    },
    {
      "id": 35,
      "title": "MongoDB Connection Pool Exhausted",
      "message": "Error: 'MongoServerSelectionError: connection pool exhausted'.",
      "causes": [
        "Too many open connections to MongoDB.",
        "Connections not closed after operations.",
        "High traffic overwhelming default pool size."
      ],
      "solutions": [
        "Increase pool size in Mongoose: `mongoose.connect(uri, { maxPoolSize: 50 })`.",
        "Close connections properly: `mongoose.connection.close()` in cleanup.",
        "Monitor and optimize queries to reduce connection usage."
      ]
    },
    {
      "id": 36,
      "title": "React App Security Vulnerability with API Keys",
      "message": "API keys exposed in React frontend code.",
      "causes": [
        "Hardcoding API keys in React source code.",
        "No backend proxy for third-party API calls.",
        "Public git repository exposing `.env` files."
      ],
      "solutions": [
        "Never hardcode API keys; use environment variables: `process.env.REACT_APP_API_KEY`.",
        "Proxy third-party API calls through Express: `/api/external` endpoint.",
        "Add `.env` to `.gitignore` and encrypt sensitive data in production."
      ]
    },
    {
      "id": 37,
      "title": "Express Server Not Logging Requests Properly",
      "message": "API requests not logged or logs are incomplete.",
      "causes": [
        "No logging middleware configured in Express.",
        "Custom logger missing request details (e.g., body, headers).",
        "Log file rotation or storage issues."
      ],
      "solutions": [
        "Use `morgan` for logging: `npm install morgan` and `app.use(morgan('combined'))`.",
        "Add custom logging: `app.use((req, res, next) => { console.log(req.method, req.url); next() })`.",
        "Use `winston` for advanced logging with rotation: `npm install winston`."
      ]
    },
    {
      "id": 38,
      "title": "React App Failing Jest Tests with MongoDB",
      "message": "Jest tests fail when interacting with MongoDB.",
      "causes": [
        "No test database setup for Jest.",
        "MongoDB connection not mocked or isolated.",
        "Timing issues in async database tests."
      ],
      "solutions": [
        "Use an in-memory MongoDB for testing: `npm install mongodb-memory-server`.",
        "Mock MongoDB with `jest-mongodb`: `npm install @shelf/jest-mongodb`.",
        "Add `beforeAll`/`afterAll` to manage database setup/teardown."
      ]
    },
    {
      "id": 39,
      "title": "Express API Not Handling Large File Downloads",
      "message": "File downloads fail or timeout for large files.",
      "causes": [
        "No streaming support for file downloads in Express.",
        " Insufficient memory to buffer large files.",
        "Client timeout settings too low."
      ],
      "solutions": [
        "Stream files in Express: `res.download(filePath)` or `fs.createReadStream(filePath).pipe(res)`.",
        "Increase memory limits in Node.js if needed: `node --max-old-space-size=8192 server.js`.",
        "Adjust client timeout: `axios.get('/download', { timeout: 30000 })`."
      ]
    },
    {
      "id": 40,
      "title": "MongoDB Data Not Persisting in Dockerized Environment",
      "message": "Data disappears after restarting Docker container with MongoDB.",
      "causes": [
        "No persistent volume configured for MongoDB container.",
        "MongoDB writing to ephemeral container storage.",
        "Misconfigured Docker Compose setup."
      ],
      "solutions": [
        "Add a volume in `docker-compose.yml`: `volumes: - mongo-data:/data/db`.",
        "Define volume in Docker: `docker run -v mongo-data:/data/db mongo`.",
        "Verify data directory permissions in MongoDB container."
      ]
    },
    {
      "id": 41,
      "title": "React App Not Handling Socket.io Connections Properly",
      "message": "WebSocket connections (Socket.io) disconnect or fail to establish.",
      "causes": [
        "No Socket.io client setup in React.",
        "Express server not handling WebSocket CORS correctly.",
        "Network issues or load balancer not supporting WebSockets."
      ],
      "solutions": [
        "Set up Socket.io client in React: `npm install socket.io-client` and `const socket = io('http://localhost:5000')`.",
        "Configure CORS in Express: `const io = require('socket.io')(server, { cors: { origin: '*' } })`.",
        "Ensure hosting provider supports WebSockets (e.g., enable sticky sessions in load balancer)."
      ]
    },
    {
      "id": 42,
      "title": "Express Server Not Handling Concurrent Requests Efficiently",
      "message": "API requests queue up or fail under concurrent load.",
      "causes": [
        "Synchronous code blocking the event loop in Express.",
        "No async handling for database operations.",
        "Limited server resources or poor configuration."
      ],
      "solutions": [
        "Use async/await for all I/O operations: `const data = await Model.find()`.",
        "Offload heavy tasks to queues: Use `bull` or `kue` for background jobs.",
        "Scale horizontally with Docker/Kubernetes or vertically with more resources."
      ]
    },
    {
      "id": 43,
      "title": "React App Fails Accessibility Audits",
      "message": "Frontend fails WCAG or other accessibility audits.",
      "causes": [
        "Missing ARIA attributes on interactive elements.",
        "Poor color contrast or non-focusable elements.",
        "No keyboard navigation support for React components."
      ],
      "solutions": [
        "Add ARIA attributes: `<button aria-label='Close'>X</button>`.",
        "Use tools like `eslint-plugin-jsx-a11y` to enforce accessibility.",
        "Ensure keyboard navigation: Add `tabIndex` and handle `onKeyDown` events."
      ]
    },
    {
      "id": 44,
      "title": "MongoDB Slow Performance with Large Collections",
      "message": "Queries on large MongoDB collections take too long.",
      "causes": [
        "Missing indexes on frequently queried fields.",
        "Inefficient queries fetching unnecessary data.",
        "No sharding for very large datasets."
      ],
      "solutions": [
        "Add indexes: `db.collection.createIndex({ field: 1 })`.",
        "Optimize queries: Use `projection` to fetch only needed fields: `Model.find({}, { field: 1 })`.",
        "Consider sharding for horizontal scaling if data size justifies."
      ]
    },
    {
      "id": 45,
      "title": "Express API Not Validating Input Data",
      "message": "Invalid or malicious input passes through Express API.",
      "causes": [
        "No input validation middleware in Express.",
        "Frontend sending unexpected data formats.",
        "No sanitization of user input."
      ],
      "solutions": [
        "Use `express-validator`: `npm install express-validator` and validate: `check('email').isEmail()`.",
        "Sanitize inputs with `sanitize-html` or `xss-clean`.",
        "Validate data in React forms before submitting: Use `yup` or `formik`."
      ]
    },
    {
      "id": 46,
      "title": "React App Fails to Handle Network Failures Gracefully",
      "message": "App crashes or shows blank UI when network fails.",
      "causes": [
        "No network error handling in React API calls.",
        "No offline state management.",
        "Express API not sending proper error responses."
      ],
      "solutions": [
        "Handle network errors: `axios.get('/api').catch(err => setError('Network error'))`.",
        "Implement offline detection: Use `navigator.onLine` and show fallback UI.",
        "Return meaningful errors from Express: `res.status(503).json({ error: 'Service unavailable' })`."
      ]
    },
    {
      "id": 47,
      "title": "MongoDB Backup Not Restoring Properly",
      "message": "Restored MongoDB data missing collections or corrupted.",
      "causes": [
        "Incorrect `mongodump`/`mongorestore` commands.",
        "Backup taken from incompatible MongoDB versions.",
        "Missing database or collection names during restore."
      ],
      "solutions": [
        "Backup with: `mongodump --uri mongodb://localhost:27017/dbname`.",
        "Restore with: `mongorestore --uri mongodb://localhost:27017/dbname dump/`.",
        "Ensure MongoDB versions match between backup and restore."
      ]
    },
    {
      "id": 48,
      "title": "Express Server Not Securing Sensitive Routes",
      "message": "Unauthenticated users can access protected API routes.",
      "causes": [
        "No authentication middleware on routes.",
        "JWT validation not implemented properly.",
        "Middleware order allowing bypass of auth checks."
      ],
      "solutions": [
        "Add JWT middleware: `const auth = (req, res, next) => { verifyToken(req.headers.authorization); next() }; app.use('/protected', auth, route)`.",
        "Use `jsonwebtoken`: `npm install jsonwebtoken` and `jwt.verify(token, secret)`.",
        "Apply middleware before routes: `app.use(auth); app.use('/api', routes)`."
      ]
    },
    {
      "id": 49,
      "title": "React App Fails to Load Images in Production",
      "message": "Images load in development but fail in production builds.",
      "causes": [
        "Relative paths breaking after React build.",
        "Images not served by Express or hosting provider.",
        "Incorrect `publicPath` in build configuration."
      ],
      "solutions": [
        "Import images in React: `import img from './img.png'`.",
        "Serve images via Express: `app.use('/images', express.static('images'))`.",
        "Ensure hosting provider serves static assets correctly."
      ]
    },
    {
      "id": 50,
      "title": "MERN App Fails End-to-End Integration Tests",
      "message": "Integration tests fail despite unit tests passing.",
      "causes": [
        "Mocked APIs not matching real backend behavior.",
        "Database state not reset between tests.",
        "Timing issues between React frontend and Express backend."
      ],
      "solutions": [
        "Use a test database for integration: Configure separate MongoDB URI.",
        "Reset database state: `beforeEach(() => Model.deleteMany({}))`.",
        "Add delays or retries for async operations: `jest.useFakeTimers()`."
      ]
    },
    {
      "id": 51,
      "title": "MongoDB Aggregation Pipeline Fails with Large Data",
      "message": "Aggregation pipeline fails or times out with large datasets.",
      "causes": [
        "Pipeline stages processing too much data without optimization.",
        "No indexes supporting aggregation queries.",
        "Memory limits exceeded on MongoDB server."
      ],
      "solutions": [
        "Optimize pipeline: Use `$match` early to reduce data, limit `$lookup` joins.",
        "Ensure indexes for `$sort` or `$group`: `db.collection.createIndex({ field: 1 })`.",
        "Increase memory limits or shard data for scalability."
      ]
    },
    {
      "id": 52,
      "title": "Express Server Not Handling GraphQL Queries",
      "message": "GraphQL endpoint returns errors or fails to resolve queries.",
      "causes": [
        "Incorrect setup of `express-graphql` middleware.",
        "Resolvers not defined or mismatched with schema.",
        "No error handling for GraphQL resolvers."
      ],
      "solutions": [
        "Set up GraphQL correctly: `npm install express-graphql graphql` and `app.use('/graphql', graphqlHTTP({ schema, graphiql: true }))`.",
        "Verify resolver matches schema: `const resolvers = { Query: { getUser: () => User.find() } }`.",
        "Add error handling: `try { return await User.find() } catch (err) { throw new Error('Failed to fetch') }`."
      ]
    },
    {
      "id": 53,
      "title": "React App Fails to Render Server-Side with SSR",
      "message": "Server-side rendering fails with errors like 'window is not defined'.",
      "causes": [
        "Browser-specific APIs (e.g., `window`, `document`) used during SSR.",
        "No proper hydration setup between server and client.",
        "Express server not rendering React components correctly."
      ],
      "solutions": [
        "Check for browser APIs: `if (typeof window !== 'undefined') { accessWindow() }`.",
        "Set up hydration: Use `ReactDOM.hydrate` in client and `renderToString` on server.",
        "Use `next.js` for easier SSR or debug Express setup: `app.get('*', (req, res) => res.send(renderToString(<App />)))`."
      ]
    },
    {
      "id": 54,
      "title": "Node.js Express Server Running Out of File Descriptors",
      "message": "Error: 'EMFILE, too many open files' when running Express server.",
      "causes": [
        "Opening too many files without closing (e.g., file streams).",
        "High traffic causing excessive file handles.",
        "System limit on file descriptors too low."
      ],
      "solutions": [
        "Close file streams properly: `fs.createReadStream().on('end', () => stream.close())`.",
        "Increase system limit: `ulimit -n 4096` on Unix systems.",
        "Use `graceful-fs` to handle file descriptor issues: `npm install graceful-fs`."
      ]
    },
    {
      "id": 55,
      "title": "React App Not Updating State After Redux Action",
      "message": "State updates in Redux don’t reflect in React components.",
      "causes": [
        "Mutating state directly in reducer instead of returning new state.",
        "No `connect` or `useSelector` to subscribe to Redux store.",
        "Middleware (e.g., `redux-thunk`) not dispatching actions correctly."
      ],
      "solutions": [
        "Ensure reducer returns new state: `return { ...state, key: value }`.",
        "Use `useSelector` in React: `const data = useSelector(state => state.data)`.",
        "Debug middleware: Add `console.log` in `redux-thunk` actions."
      ]
    },
    {
      "id": 56,
      "title": "MongoDB Change Streams Not Triggering",
      "message": "Change streams in MongoDB don’t fire on document updates.",
      "causes": [
        "MongoDB not running as a replica set (required for change streams).",
        "Incorrect pipeline or filter in change stream setup.",
        "Network issues interrupting stream connection."
      ],
      "solutions": [
        "Set up replica set: `mongod --replSet rs0` and `rs.initiate()`.",
        "Verify change stream: `const stream = Model.watch([{ $match: { operationType: 'insert' } }])`.",
        "Add reconnection logic: `stream.on('error', () => stream.close() && reconnect())`."
      ]
    },
    {
      "id": 57,
      "title": "Express Server Not Handling CORS for Subdomains",
      "message": "CORS fails for subdomains (e.g., api.domain.com) but works for main domain.",
      "causes": [
        "CORS middleware not configured for dynamic origins.",
        "No support for credentials (e.g., cookies) in CORS setup.",
        "React frontend sending requests without proper headers."
      ],
      "solutions": [
        "Allow dynamic origins: `app.use(cors({ origin: (origin, callback) => callback(null, true) }))`.",
        "Support credentials: `app.use(cors({ origin: true, credentials: true }))`.",
        "Set headers in React: `axios.get('/api', { withCredentials: true })`."
      ]
    },
    {
      "id": 58,
      "title": "React App Fails to Handle API Rate Limits Gracefully",
      "message": "App crashes or stalls when Express API hits rate limits.",
      "causes": [
        "No retry logic for rate-limited API responses.",
        "Frontend sending too many requests in a loop.",
        "Express API not providing rate limit headers."
      ],
      "solutions": [
        "Add retry logic in React: `axios-retry` or custom `setTimeout` on 429 responses.",
        "Debounce requests in React: `const debouncedFetch = debounce(fetchData, 1000)`.",
        "Send rate limit headers in Express: `res.set('X-RateLimit-Remaining', remaining)`."
      ]
    },
    {
      "id": 59,
      "title": "MongoDB Replica Set Write Concerns Not Met",
      "message": "Error: 'Not enough nodes to satisfy write concern'.",
      "causes": [
        "Replica set nodes down or unavailable.",
        "Write concern set too high for available nodes.",
        "Network issues preventing quorum."
      ],
      "solutions": [
        "Check node status: `rs.status()` in MongoDB shell.",
        "Lower write concern: `Model.create(data, { writeConcern: { w: 1 } })`.",
        "Fix network issues and ensure all nodes are reachable."
      ]
    },
    {
      "id": 60,
      "title": "Express Server Not Handling HTTPS in Production",
      "message": "Express serves HTTP instead of HTTPS in production.",
      "causes": [
        "No HTTPS setup in Express server.",
        "SSL certificates not configured or invalid.",
        "Hosting provider not redirecting HTTP to HTTPS."
      ],
      "solutions": [
        "Set up HTTPS in Express: `const https = require('https'); https.createServer(options, app).listen(443)`.",
        "Use free SSL with Let’s Encrypt: `certbot --nginx` or similar.",
        "Force HTTPS redirect: `app.use((req, res, next) => { if (!req.secure) res.redirect('https://' + req.headers.host + req.url); else next() })`."
      ]
    },
    {
      "id": 61,
      "title": "React App Fails to Render Large Forms Efficiently",
      "message": "Form inputs lag or freeze when handling large forms in React.",
      "causes": [
        "Uncontrolled inputs causing frequent re-renders.",
        "No form library to optimize state updates.",
        "Large state object updates triggering unnecessary renders."
      ],
      "solutions": [
        "Use controlled inputs with `useMemo` for expensive computations.",
        "Adopt `formik` or `react-hook-form` for optimized form handling: `npm install react-hook-form`.",
        "Debounce input changes: `const debouncedChange = useCallback(debounce(setValue, 300), [])`."
      ]
    },
    {
      "id": 62,
      "title": "MongoDB Sharding Not Distributing Data Evenly",
      "message": "Sharded MongoDB collections show uneven data distribution.",
      "causes": [
        "Poor shard key choice leading to hotspotting.",
        "No pre-splitting of chunks during sharding setup.",
        "Low write activity not triggering auto-balancing."
      ],
      "solutions": [
        "Choose a better shard key: Use a high-cardinality field (e.g., `userId`).",
        "Pre-split chunks: `sh.splitAt('collection', { shardKey: value })`.",
        "Force balancer to run: `sh.startBalancer()` in MongoDB shell."
      ]
    },
    {
      "id": 63,
      "title": "Express Server Fails to Handle WebSocket Upgrades",
      "message": "WebSocket connections fail with 'Unexpected server response: 400'.",
      "causes": [
        "No WebSocket upgrade handling in Express.",
        "Load balancer or proxy not forwarding WebSocket upgrades.",
        "CORS issues with WebSocket connections."
      ],
      "solutions": [
        "Handle WebSocket upgrades: `const server = http.createServer(app); const io = require('socket.io')(server)`.",
        "Configure proxy (e.g., Nginx): `proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'`.",
        "Allow WebSocket CORS: `io.origins('*:*')` or specify origins."
      ]
    },
    {
      "id": 64,
      "title": "React App Fails to Persist Redux State Across Sessions",
      "message": "Redux state resets on browser refresh.",
      "causes": [
        "No persistence mechanism for Redux store.",
        "State stored only in memory, not localStorage.",
        "Incorrect setup of `redux-persist`."
      ],
      "solutions": [
        "Use `redux-persist`: `npm install redux-persist` and configure: `persistStore(store)`.",
        "Manually save to `localStorage`: `localStorage.setItem('state', JSON.stringify(state))`.",
        "Load state on app start: `const persistedState = localStorage.getItem('state') ? JSON.parse(...) : initialState`."
      ]
    },
    {
      "id": 65,
      "title": "MongoDB Fails to Handle Text Search Queries",
      "message": "Text search queries return empty or incorrect results.",
      "causes": [
        "No text index created on searched fields.",
        "Incorrect query syntax for `$text` search.",
        "Case sensitivity or language mismatch."
      ],
      "solutions": [
        "Create text index: `db.collection.createIndex({ field: 'text' })`.",
        "Use `$text` operator: `Model.find({ $text: { $search: 'keyword' } })`.",
        "Specify language if needed: `{ $language: 'english' }`."
      ]
    },
    {
      "id": 66,
      "title": "Express Server Not Handling File Downloads Efficiently",
      "message": "File downloads slow or fail for large files.",
      "causes": [
        "Buffering entire file in memory before sending.",
        "No streaming support for downloads.",
        "Client-side timeout interrupting download."
      ],
      "solutions": [
        "Stream files: `fs.createReadStream(filePath).pipe(res)`.",
        "Set proper headers: `res.setHeader('Content-Disposition', 'attachment; filename=file.txt')`.",
        "Increase client timeout: `axios.get('/download', { timeout: 60000 })`."
      ]
    },
    {
      "id": 67,
      "title": "React App Fails ESLint/Prettier Consistency",
      "message": "Code formatting issues causing conflicts in team.",
      "causes": [
        "Conflicting ESLint and Prettier rules.",
        "No shared config for team members.",
        "Editor settings overriding lint rules."
      ],
      "solutions": [
        "Use `eslint-config-prettier`: `npm install --save-dev eslint-config-prettier`.",
        "Share `.eslintrc` and `.prettierrc` in repo: `'extends': ['prettier']`.",
        "Auto-fix on save: Configure editor (e.g., VS Code) with `eslint` and `prettier` extensions."
      ]
    },
    {
      "id": 68,
      "title": "MongoDB Fails to Handle Geospatial Queries",
      "message": "Geospatial queries return incorrect or empty results.",
      "causes": [
        "No 2dsphere index on geospatial field.",
        "Incorrect GeoJSON format for coordinates.",
        "Query syntax mismatch (e.g., `$near` vs `$geoWithin`)."
      ],
      "solutions": [
        "Create 2dsphere index: `db.collection.createIndex({ location: '2dsphere' })`.",
        "Use GeoJSON format: `{ type: 'Point', coordinates: [lng, lat] }`.",
        "Verify query: `Model.find({ location: { $near: { $geometry: { type: 'Point', coordinates: [lng, lat] }, $maxDistance: 1000 } } })`."
      ]
    },
    {
      "id": 69,
      "title": "Express Server Not Handling API Versioning",
      "message": "API updates break React app due to no versioning.",
      "causes": [
        "No versioning strategy for Express APIs.",
        "Frontend and backend changes not synchronized.",
        "Old clients accessing new API endpoints."
      ],
      "solutions": [
        "Implement URL versioning: `app.use('/api/v1', v1Routes)`.",
        "Use header versioning: `if (req.headers['api-version'] === 'v1')`.",
        "Maintain backward compatibility or notify clients of breaking changes."
      ]
    },
    {
      "id": 70,
      "title": "React App Not Handling Slow API Responses",
      "message": "App freezes or shows no feedback during slow API calls.",
      "causes": [
        "No loading state in React during API calls.",
        "API response time not optimized in Express.",
        "No timeout handling for slow requests."
      ],
      "solutions": [
        "Add loading state: `const [loading, setLoading] = useState(false); setLoading(true); await fetchData(); setLoading(false)`.",
        "Optimize Express API: Cache responses or optimize MongoDB queries.",
        "Set timeout in React: `axios.get('/api', { timeout: 10000 }).catch(err => setError('Request timed out'))`."
      ]
    },
    {
      "id": 71,
      "title": "MongoDB Fails to Handle Concurrent Connections",
      "message": "Error: 'Too many connections' when accessing MongoDB.",
      "causes": [
        "Connection pool too small for high traffic.",
        "Connections not closed after operations.",
        "Multiple Express instances opening separate pools."
      ],
      "solutions": [
        "Increase connection pool size: `mongoose.connect(uri, { maxPoolSize: 100 })`.",
        "Close connections properly: `mongoose.connection.close()` in cleanup.",
        "Use a single connection pool: Share `mongoose.connect()` across Express app."
      ]
    },
    {
      "id": 72,
      "title": "Express Server Not Handling Slow MongoDB Queries",
      "message": "Slow MongoDB queries cause Express routes to hang.",
      "causes": [
        "No indexes on queried fields.",
        "Fetching large datasets without pagination.",
        "No timeout handling for database operations."
      ],
      "solutions": [
        "Add indexes: `db.collection.createIndex({ field: 1 })`.",
        "Paginate data: `Model.find().skip(page * limit).limit(limit)`.",
        "Set timeout for queries: `Model.find().maxTimeMS(5000)`."
      ]
    },
    {
      "id": 73,
      "title": "React App Fails to Handle Edge Cases in API Responses",
      "message": "App crashes when API returns unexpected data formats.",
      "causes": [
        "No validation of API response structure in React.",
        "Express API returning inconsistent data types.",
        "No fallback for empty or malformed responses."
      ],
      "solutions": [
        "Validate responses in React: `if (data?.items) renderItems(data.items) else renderEmpty()`.",
        "Standardize Express responses: `res.json({ status: 'success', data: [] })`.",
        "Use TypeScript or PropTypes for stricter data validation."
      ]
    },
    {
      "id": 74,
      "title": "Node.js Express Server Fails Under DDoS Attacks",
      "message": "Express server crashes due to excessive malicious requests.",
      "causes": [
        "No rate limiting or request validation.",
        "No DDoS protection at server level.",
        "Resources overwhelmed by fake traffic."
      ],
      "solutions": [
        "Add rate limiting: `npm install express-rate-limit` and `app.use(rateLimit({ windowMs: 15 * 60 * 1000, max: 100 }))`.",
        "Use a reverse proxy (e.g., Nginx) with DDoS protection: `limit_req_zone` directive.",
        "Deploy behind a CDN like Cloudflare for DDoS mitigation."
      ]
    },
    {
      "id": 75,
      "title": "React App Not Compatible with Older Browsers",
      "message": "App fails in older browsers like IE11.",
      "causes": [
        "Unpolyfilled ES6+ features (e.g., `Promise`, `Array.includes`).",
        "No browser compatibility checks during build.",
        "Third-party libraries using modern JavaScript."
      ],
      "solutions": [
        "Add polyfills: `npm install core-js` and `import 'core-js/stable'`.",
        "Use `browserslist` in `package.json`: `'browserslist': ['>0.2%', 'not dead', 'ie 11']`.",
        "Test in older browsers during development using BrowserStack."
      ]
    },
    {
      "id": 76,
      "title": "MongoDB Fails to Rollback Failed Transactions",
      "message": "Transactions partially applied despite errors.",
      "causes": [
        "Session not aborted on error.",
        "No proper error handling in transaction block.",
        "MongoDB replica set issues interrupting transactions."
      ],
      "solutions": [
        "Abort transaction on error: `try { await session.commitTransaction() } catch (err) { await session.abortTransaction() }`.",
        "Ensure replica set health: `rs.status()`.",
        "Retry failed transactions with exponential backoff."
      ]
    },
    {
      "id": 77,
      "title": "Express Server Not Handling Large File Uploads Securely",
      "message": "Large file uploads cause crashes or security issues.",
      "causes": [
        "No size limit on file uploads.",
        "Files not sanitized or validated.",
        "No temporary storage cleanup."
      ],
      "solutions": [
        "Limit file size with `multer`: `multer({ limits: { fileSize: 5 * 1024 * 1024 } })`.",
        "Validate file types: `if (!file.mimetype.startsWith('image/')) throw new Error('Invalid file type')`.",
        "Clean up temp files: Use `fs.unlink` after processing."
      ]
    },
    {
      "id": 78,
      "title": "React App Fails to Optimize Bundle Size",
      "message": "Large bundle size causes slow initial load in React app.",
      "causes": [
        "No code splitting or lazy loading.",
        "Large dependencies bloating the bundle.",
        "No tree-shaking optimization."
      ],
      "solutions": [
        "Use dynamic imports: `const Component = React.lazy(() => import('./Component'))`.",
        "Analyze bundle: `npm install --save-dev webpack-bundle-analyzer` and `npm run analyze`.",
        "Enable tree-shaking: Ensure `mode: 'production'` in Webpack config."
      ]
    },
    {
      "id": 79,
      "title": "Express Server Not Implementing CSRF Protection",
      "message": "API endpoints vulnerable to CSRF attacks.",
      "causes": [
        "No CSRF protection middleware in Express.",
        "Session-based authentication without CSRF tokens.",
        "React forms not sending CSRF tokens."
      ],
      "solutions": [
        "Use `csurf` middleware: `npm install csurf` and `app.use(csurf())`.",
        "Generate CSRF token in Express: `res.cookie('XSRF-TOKEN', req.csrfToken())`.",
        "Include token in React: `<input type='hidden' name='_csrf' value={token} />`."
      ]
    },
    {
      "id": 80,
      "title": "MongoDB Fails to Handle Time-Series Data Efficiently",
      "message": "Slow queries or high storage usage with time-series data.",
      "causes": [
        "No time-series collection optimization.",
        "No indexing on timestamp fields.",
        "Large documents bloating storage."
      ],
      "solutions": [
        "Use time-series collections (MongoDB 5.0+): `db.createCollection('metrics', { timeseries: { timeField: 'timestamp' } })`.",
        "Index timestamps: `db.collection.createIndex({ timestamp: 1 })`.",
        "Aggregate data into smaller buckets: `{$group: { _id: { $dateTrunc: { date: '$timestamp', unit: 'hour' } } }}`."
      ]
    },
    {
      "id": 81,
      "title": "React App Fails to Handle Internationalization",
      "message": "App displays untranslated text or incorrect locale.",
      "causes": [
        "No internationalization library integrated.",
        "Locale not detected or set correctly.",
        "Missing translation keys in language files."
      ],
      "solutions": [
        "Use `react-i18next`: `npm install react-i18next i18next` and `i18n.init()`.",
        "Detect locale: `const locale = navigator.language || 'en'`.",
        "Ensure translations exist: `en.json` with `key: 'value'`."
      ]
    },
    {
      "id": 82,
      "title": "Express Server Not Handling Graceful Shutdown",
      "message": "Server crashes without closing connections on shutdown.",
      "causes": [
        "No shutdown logic for Express server.",
        "Connections (e.g., MongoDB) not closed.",
        "No handling for SIGTERM/SIGINT signals."
      ],
      "solutions": [
        "Add shutdown handler: `process.on('SIGTERM', () => { server.close(() => mongoose.connection.close()) })`.",
        "Close connections: `mongoose.connection.close(() => process.exit(0))`.",
        "Use `pm2` for managed shutdown: `pm2 stop server`."
      ]
    },
    {
      "id": 83,
      "title": "React App Fails to Handle Concurrent API Calls",
      "message": "Concurrent API calls overwrite state or cause race conditions.",
      "causes": [
        "No cancellation of previous API requests.",
        "State updates not synchronized.",
        "No debouncing or throttling of API calls."
      ],
      "solutions": [
        "Cancel previous requests with `axios`: `const source = axios.CancelToken.source(); source.cancel()`.",
        "Use functional updates: `setState(prev => ({ ...prev, data }))`.",
        "Throttle calls: `const throttledFetch = throttle(fetchData, 1000)`."
      ]
    },
    {
      "id": 84,
      "title": "MongoDB Fails to Handle Schema Migrations",
      "message": "Schema changes break existing MongoDB data.",
      "causes": [
        "No migration scripts for existing documents.",
        "Required fields added without defaults.",
        "Data type changes breaking queries."
      ],
      "solutions": [
        "Write migration script: `Model.updateMany({ field: { $exists: false } }, { $set: { field: 'default' } })`.",
        "Add defaults in schema: `{ field: { type: String, default: 'value' } }`.",
        "Use `mongooose-migrate` for automated migrations: `npm install mongoose-migrate`."
      ]
    },
    {
      "id": 85,
      "title": "Express Server Not Handling Session Management Securely",
      "message": "Session data exposed or not persisting correctly.",
      "causes": [
        "No secure session storage (e.g., in-memory).",
        "Session cookies not secured with `httpOnly` or `secure`.",
        "No session expiration or invalidation."
      ],
      "solutions": [
        "Use `express-session` with MongoDB store: `npm install connect-mongo` and `session({ store: MongoStore.create() })`.",
        "Secure cookies: `session({ cookie: { secure: true, httpOnly: true } })`.",
        "Set expiration: `session({ cookie: { maxAge: 24 * 60 * 60 * 1000 } })`."
      ]
    },
    {
      "id": 86,
      "title": "React App Fails to Handle Browser Back Button",
      "message": "Back button navigation breaks React app state.",
      "causes": [
        "No handling of browser history in React Router.",
        "State not preserved on route changes.",
        "API calls triggered unnecessarily on back navigation."
      ],
      "solutions": [
        "Use `useLocation` and `useHistory` in React Router: `const location = useLocation()`.",
        "Preserve state: `history.push('/path', { state: data })`.",
        "Prevent duplicate API calls: Check `location.state` before fetching."
      ]
    },
    {
      "id": 87,
      "title": "MongoDB Fails to Handle Bulk Write Operations",
      "message": "Bulk write operations fail or partially apply.",
      "causes": [
        "Duplicate key errors in bulk writes.",
        "No error handling for individual operations.",
        "Connection issues interrupting bulk ops."
      ],
      "solutions": [
        "Use `ordered: false` for non-critical order: `Model.bulkWrite(ops, { ordered: false })`.",
        "Handle errors: `try { await Model.bulkWrite(ops) } catch (err) { console.log(err.writeErrors) }`.",
        "Retry failed operations with smaller batches."
      ]
    },
    {
      "id": 88,
      "title": "Express Server Not Handling Path Traversal Attacks",
      "message": "API endpoints vulnerable to path traversal (e.g., `../../etc/passwd`).",
      "causes": [
        "No sanitization of file paths in Express.",
        "Direct use of user input in file system operations.",
        "No middleware to block malicious paths."
      ],
      "solutions": [
        "Use `express-sanitized`: `npm install express-sanitized` and `app.use(expressSanitized())`.",
        "Restrict file access: Serve files from a specific directory only."
      ]
    },
    {
      "id": 89,
      "title": "React App Fails to Handle Large File Uploads",
      "message": "Large file uploads fail or timeout in React app.",
      "causes": [
        "No chunked upload strategy for large files.",
        "Express server rejecting large payloads.",
        "No progress feedback during upload."
      ],
      "solutions": [
        "Implement chunked uploads: Split file into chunks and send via `fetch`.",
        "Increase Express limit: `app.use(express.json({ limit: '50mb' }))`.",
        "Show progress: `<progress value={progress} max='100' />` with `onUploadProgress` in `axios`."
      ]
    },
    {
      "id": 90,
      "title": "MERN App Fails to Scale in Kubernetes",
      "message": "App crashes or performs poorly when deployed in Kubernetes.",
      "causes": [
        "No resource limits defined for Express and MongoDB pods.",
        "MongoDB connection issues in containerized environment.",
        "No horizontal pod autoscaling configured."
      ],
      "solutions": [
        "Set resource limits: `resources: { limits: { memory: '512Mi' }, requests: { memory: '256Mi' } }` in pod spec.",
        "Use MongoDB StatefulSet: Ensure stable network identifiers.",
        "Add HPA: `kubectl autoscale deployment express-app --cpu-percent=75 --min=2 --max=10`."
      ]
    }
  ]